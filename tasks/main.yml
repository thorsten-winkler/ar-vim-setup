---
################################################################################
### tasks file for ar-vim-setup ################################################
################################################################################

################################################################################
### Get distro information (name, version, ...)
################################################################################
- name: "Get \"distro\" related information"
  import_tasks: "1_get-common-distro-infos.yml"

################################################################################
### Ensure that all users with correct group exist
################################################################################
- name: "Search for defined users"
  user:
    name: "{{ item.user_name }}"
    group: "{{ item.user_group }}"
  check_mode: yes
  register: reg_search
  loop: "{{ users }}"
  loop_control:
    label: "{{ item.user_name }}:{{ item.user_group }}"

- name: "Check existence of defined users"
  fail:
    msg: "User {{ item.invocation.module_args.name }} does not exist"
  when: "item.changed is true"
  loop: "{{ reg_search.results }}"
  loop_control:
    label: "Check for user {{ item.invocation.module_args.name }}! If skipping user already exists..."


################################################################################
### Install all packages defined in defaults/* and/or var/*
################################################################################
- name: "Install required packages"
  package:
    name: "{{ item.name }}"
    state: present
  loop: "{{ packages }}"
  loop_control:
    label: "{{ item.name }}"

################################################################################
### Install vim for all defined users
################################################################################
- name: "Create vim directory structure for all defined users"
  file:
    path: "{{ item[0].user_dir }}/{{ item[1].vim_cfg_dir }}"
    group: "{{ item[0].user_group }}"
    owner: "{{ item[0].user_name }}"
    state: directory
  loop: "{{ users | product(vim_config_directories) | list }}"
  loop_control:
    label: "{{ item[0].user_dir  }}/{{ item[1].vim_cfg_dir }} created"

- name: "Download/Install \"vim-plug\" as plugin manager"
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ item.user_dir }}/{{ vim_base_config_dir }}/autoload"
    group: "{{ item.user_group }}"
    owner: "{{ item.user_name }}"
  loop: "{{ users }}"
  loop_control:
    label: "{{ item.user_dir  }}/{{ vim_base_config_dir }}/autoload/plug.vim downloaded"

- name: "Download/Install additional repos/items required by vim"
  git:
    repo: "{{ item[1].repo }}"
    dest: "{{ item[0].user_dir }}/{{ item[1].dest }}"
    version: "{{ item[1].version  }}"
  loop: "{{ users | product(repositories) | list }}"
  loop_control:
    label: "{{ item[1].repo  }} cloned to {{ item[0].user_dir }}/{{ item[1].dest }}"
  become_user: "{{ item[0].user_name }}"
  become: yes

- name: "Change to correct ownership of the previous step"
  file:
    path: "{{ item[0].user_dir }}/{{ item[1].dest }}"
    group: "{{ item[0].user_group }}"
    owner: "{{ item[0].user_name }}"
    recurse: yes
    state: directory
  loop: "{{ users | product(repositories) | list }}"
  loop_control:
    label: "{{ item[0].user_dir }}/{{ item[1].dest }} changed to owner: {{ item[0].user_name }} and group: {{ item[0].user_group }}"

- name: "Copy individual filetype plugin to vim directory of all defined users"
  copy:
    src: files/ftplugin
    dest: "{{ item.user_dir }}/{{ vim_base_config_dir }}"
    group: "{{ item.user_group }}"
    owner: "{{ item.user_name }}"
  loop: "{{ users }}"
  loop_control:
    label: "Copy files/ftplugin to {{ item.user_dir }}/{{ vim_base_config_dir }}"

- name: "Copy .vimrc to users directory"
  copy:
    src: files/.vimrc
    dest: "{{ item.user_dir }}"
    group: "{{ item.user_group }}"
    owner: "{{ item.user_name }}"
  loop: "{{ users }}"
  loop_control:
    label: "Copy files/.vimrc to {{ item.user_dir }}/.vimrc"

- name: "Execute PlugInstall to install prepared VIM Plugins"
  command: creates="{{ item.user_dir }}/.vim/plugged/nerdtree" vim +'PlugInstall' +'qa'
  loop: "{{ users }}"
  loop_control:
    label: "Execute PlugInstall for user {{ item.user_name }}"
  become_user: "{{ item.user_name }}"
  become: yes
